name: Rust Multi-Platform Build

on:
  push:
    branches:
      - main  # 仅在主分支上触发
    tags:
      - 'v*'  # 表示任何以 v 开头的标签都会触发工作流

jobs:
  build:
    name: Build for ${{ matrix.platform.os-name }}
    strategy:
      matrix:
        platform:
          - os-name: Linux-x86_64
            runs-on: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: binary-linux-amd64
          - os-name: Windows-x86_64
            runs-on: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: binary-windows-amd64.exe
          - os-name: macOS-x86_64
            runs-on: macOS-latest
            target: x86_64-apple-darwin
            artifact_name: binary-macos-amd64
    runs-on: ${{ matrix.platform.runs-on }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: ${{ matrix.platform.target }}

      - name: Install cross for non-Windows
        if: matrix.platform.target != 'x86_64-pc-windows-msvc'
        run: |
          python -m pip install cross

      - name: Install MinGW for Windows cross-compilation
        if: matrix.platform.target == 'x86_64-pc-windows-msvc'
        run: |
          sudo apt-get install -y gcc-mingw-w64-x86-64

      - name: Build binary
        run: |
          cross build --target ${{ matrix.platform.target }} --release
          if [[ "${{ matrix.platform.artifact_name }}" == *.exe ]]; then
            mv target/${{ matrix.platform.target }}/release/binary.exe ${{ matrix.platform.artifact_name }}
          else
            mv target/${{ matrix.platform.target }}/release/binary ${{ matrix.platform.artifact_name }}
          fi

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.artifact_name }}
          path: ${{ matrix.platform.artifact_name }}